<?php
/**
 * Generated by Haxe 4.1.5
 * Haxe source file: src/App.hx
 */

use \xapi\ContextActivity;
use \xapi\Result;
use \lrs\vendors\LearninLocker;
use \php\_Boot\HxAnon;
use \xapi\Agent;
use \php\Boot;
use \haxe\Log;
use \xapi\types\StatementRef;
use \php\Lib;
use \xapi\Verb;
use \xapi\Statement;
use \xapi\Activity;
use \php\_Boot\HxString;
use \haxe\Exception as HaxeException;
use \haxe\ds\StringMap;
use \haxe\Unserializer;
use \haxe\ds\EnumValueMap;
use \xapi\activities\Definition;
use \haxe\format\JsonParser;
use \haxe\format\JsonPrinter;
use \xapi\Context;
use \xapi\types\Score;
use \haxe\NativeStackTrace;
use \haxe\Serializer;

/**
 * ...
 * @author bb
 */
class App {
	/**
	 * @var bool
	 */
	public $_maindebug;
	/**
	 * @var LearninLocker
	 */
	public $lrs;
	/**
	 * @var StringMap
	 */
	public $params;
	/**
	 * @var StringMap
	 */
	public $resultMessageBack;

	/**
	 * @return void
	 */
	public function __construct () {
		#src/App.hx:33: characters 3-30
		Serializer::$USE_CACHE = true;
		#src/App.hx:34: characters 3-60
		$this->params = Lib::hashOfAssociativeArray($_REQUEST);
		#src/App.hx:35: characters 3-25
		$this->resultMessageBack = new StringMap();
		#src/App.hx:36: characters 3-44
		$this->resultMessageBack->data["status"] = "failed";
		#src/App.hx:40: characters 3-36
		$location = $_SERVER["SERVER_NAME"];
		#src/App.hx:41: characters 3-52
		$this->_maindebug = HxString::indexOf($location, "test.salt.ch") > -1;
		#src/App.hx:42: lines 42-49
		$this->lrs = ($this->_maindebug ? new LearninLocker("test", "https://qast.test.salt.ch/data/xAPI/", "25086ae582099d0c7b9c6bbf66688656b24b9478", "ee535a5e87d405d400d44d8a1a6693739e868ca7") : new LearninLocker("tm", "https://qast.salt.ch/data/xAPI/", "a36cc73da2a8a79f20b36e7502c10ed7eebee98b", "c2d3b79c52e94a99c4e239a3de529ffd6a60d2b0"));
		#src/App.hx:53: characters 3-27
		$this->lrs->get_httpData()->add(Boot::getInstanceClosure($this, 'onData'));
		#src/App.hx:54: characters 3-31
		$this->lrs->get_errorStatus()->add(Boot::getInstanceClosure($this, 'onError'));
		#src/App.hx:55: characters 3-33
		$this->lrs->get_signalStatus()->add(Boot::getInstanceClosure($this, 'onStatus'));
		#src/App.hx:57: lines 57-80
		if (array_key_exists("statement", $this->params->data)) {
			#src/App.hx:59: characters 4-43
			$this->sendStatement(($this->params->data["statement"] ?? null));
		} else if (array_key_exists("verb", $this->params->data)) {
			#src/App.hx:67: characters 5-40
			$this->lrs->postStatement($this->prepareLeagacy());
		} else {
			#src/App.hx:73: characters 5-36
			$this->sendStatement($this->testSerializer());
		}
	}

	/**
	 * @param string $data
	 * 
	 * @return void
	 */
	public function onData ($data) {
		#src/App.hx:211: characters 3-59
		$this1 = $this->resultMessageBack;
		$value = (new JsonParser($data))->doParse();
		$this1->data["statementsIds"] = $value;
		#src/App.hx:212: characters 3-47
		echo(\Std::string(JsonPrinter::print($this->resultMessageBack, null, null)));
	}

	/**
	 * @param mixed $msg
	 * 
	 * @return void
	 */
	public function onError ($msg) {
		#src/App.hx:202: characters 3-36
		$this->resultMessageBack->data["msg"] = $msg;
		#src/App.hx:203: characters 3-47
		echo(\Std::string(JsonPrinter::print($this->resultMessageBack, null, null)));
	}

	/**
	 * @param int $status
	 * 
	 * @return void
	 */
	public function onStatus ($status) {
		#src/App.hx:188: lines 188-194
		if ($status === 200) {
			#src/App.hx:190: characters 4-46
			$this->resultMessageBack->data["status"] = "success";
		} else {
			#src/App.hx:193: characters 4-45
			$this->resultMessageBack->data["status"] = "failed";
		}
	}

	/**
	 * @return Statement
	 */
	public function prepareLeagacy () {
		#src/App.hx:88: characters 3-73
		if (!array_key_exists("mbox", $this->params->data)) {
			#src/App.hx:88: characters 31-73
			$this->params->data["mbox"] = "bruno.baudry@salt.ch";
		}
		#src/App.hx:89: characters 3-60
		if (!array_key_exists("name", $this->params->data)) {
			#src/App.hx:89: characters 31-60
			$this->params->data["name"] = "bbaudry";
		}
		#src/App.hx:90: characters 3-94
		if (!array_key_exists("activity", $this->params->data)) {
			#src/App.hx:90: characters 35-94
			$this->params->data["activity"] = "https://qook.test.salt.ch/trouble";
		}
		#src/App.hx:91: characters 3-74
		if (!array_key_exists("contractor", $this->params->data)) {
			#src/App.hx:91: characters 37-74
			$this->params->data["contractor"] = "399999999";
		}
		#src/App.hx:92: characters 3-63
		if (!array_key_exists("voip", $this->params->data)) {
			#src/App.hx:92: characters 31-63
			$this->params->data["voip"] = "0200000000";
		}
		#src/App.hx:97: characters 26-44
		$agent = ($this->params->data["mbox"] ?? null);
		#src/App.hx:97: characters 3-67
		$agent1 = new Agent($agent, ($this->params->data["name"] ?? null));
		#src/App.hx:98: lines 98-104
		$verb = null;
		#src/App.hx:98: characters 23-41
		$_g = ($this->params->data["verb"] ?? null);
		#src/App.hx:98: lines 98-103
		if ($_g === null) {
			#src/App.hx:98: lines 98-104
			$verb = Verb::$initialized;
		} else {
			#src/App.hx:98: characters 23-41
			if ($_g === "initialized") {
				#src/App.hx:98: lines 98-104
				$verb = Verb::$initialized;
			} else if ($_g === "resolved") {
				$verb = Verb::$resolved;
			} else if ($_g === "submitted") {
				$verb = Verb::$submitted;
			} else {
				$verb = Verb::$initialized;
			}
		}
		#src/App.hx:105: characters 3-55
		$activity = new Activity(($this->params->data["activity"] ?? null));
		#src/App.hx:106: characters 3-30
		$def = new Definition();
		#src/App.hx:111: lines 111-114
		if (array_key_exists("contractor", $this->params->data)) {
			#src/App.hx:113: characters 4-83
			$this1 = $def->get_extensions();
			$value = ($this->params->data["contractor"] ?? null);
			$this1->data["https://vti.salt.ch/contractor/"] = $value;
		}
		#src/App.hx:115: lines 115-118
		if (array_key_exists("voip", $this->params->data)) {
			#src/App.hx:117: characters 4-71
			$this1 = $def->get_extensions();
			$value = ($this->params->data["voip"] ?? null);
			$this1->data["https://vti.salt.ch/voip/"] = $value;
		}
		#src/App.hx:119: lines 119-122
		if (array_key_exists("case", $this->params->data)) {
			#src/App.hx:121: characters 4-63
			$this1 = $def->get_extensions();
			$value = ($this->params->data["case"] ?? null);
			$this1->data["https://cs.salt.ch"] = $value;
		}
		#src/App.hx:123: lines 123-126
		if (array_key_exists("steps", $this->params->data)) {
			#src/App.hx:125: characters 4-82
			$this1 = $def->get_extensions();
			$value = ($this->params->data["steps"] ?? null);
			$this1->data["https://qook.salt.ch/trouble/steps/"] = $value;
		}
		#src/App.hx:127: lines 127-130
		if (array_key_exists("total_steps", $this->params->data)) {
			#src/App.hx:129: characters 4-94
			$this1 = $def->get_extensions();
			$value = ($this->params->data["total_steps"] ?? null);
			$this1->data["https://qook.salt.ch/trouble/total_steps/"] = $value;
		}
		#src/App.hx:131: lines 131-134
		if (array_key_exists("values", $this->params->data)) {
			#src/App.hx:133: characters 4-84
			$this1 = $def->get_extensions();
			$value = ($this->params->data["values"] ?? null);
			$this1->data["https://qook.salt.ch/trouble/values/"] = $value;
		}
		#src/App.hx:135: characters 3-28
		$activity->set_definition($def);
		#src/App.hx:139: lines 139-143
		$stmnt = new Statement($agent1, $verb, $activity);
		#src/App.hx:144: lines 144-149
		if (array_key_exists("statement", $this->params->data) && (($this->params->data["statement"] ?? null) !== null) && (($this->params->data["statement"] ?? null) !== "null")) {
			#src/App.hx:146: characters 4-63
			$this1 = $this->resultMessageBack;
			$value = ($this->params->data["statement"] ?? null);
			$this1->data["statement"] = $value;
			#src/App.hx:147: characters 4-33
			$stmnt->set_context(new Context());
			#src/App.hx:148: characters 47-70
			$tmp = ($this->params->data["statement"] ?? null);
			#src/App.hx:148: characters 4-71
			$stmnt->get_context()->statement = new StatementRef($tmp);
		}
		#src/App.hx:150: characters 3-15
		return $stmnt;
	}

	/**
	 * @param \Array_hx $stmts
	 * 
	 * @return string
	 */
	public function prepareStatement ($stmts) {
		#src/App.hx:274: characters 3-20
		$s = "";
		#src/App.hx:275: lines 275-291
		try {
			#src/App.hx:277: characters 8-29
			$s = JsonPrinter::print($stmts, null, null);
			#src/App.hx:280: characters 4-51
			$ereg = new \EReg(",\\s*\"[^\"]+\":null|\"[^\"]+\":null,?", "g");
			#src/App.hx:281: characters 4-52
			$ereg2 = new \EReg(",\\s*\"[^\"]+\":\\[\\]|\"[^\"]+\":\\[\\],?", "g");
			#src/App.hx:282: characters 4-52
			$ereg3 = new \EReg(",\\s*\"[^\"]+\":\\{\\}|\"[^\"]+\":\\{\\},?", "g");
			#src/App.hx:284: characters 4-27
			$s = $ereg->replace($s, "");
			#src/App.hx:285: characters 4-28
			$s = $ereg2->replace($s, "");
			#src/App.hx:286: characters 4-28
			$s = $ereg3->replace($s, "");
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$e = HaxeException::caught($_g)->unwrap();
			#src/App.hx:290: characters 4-9
			(Log::$trace)($e, new HxAnon([
				"fileName" => "src/App.hx",
				"lineNumber" => 290,
				"className" => "App",
				"methodName" => "prepareStatement",
			]));
		}
		#src/App.hx:295: characters 3-11
		return $s;
	}

	/**
	 * @param string $stmt
	 * 
	 * @return void
	 */
	public function sendStatement ($stmt) {
		#src/App.hx:156: characters 3-17
		$stage = 0;
		#src/App.hx:157: lines 157-180
		try {
			#src/App.hx:158: characters 4-43
			$statement = Unserializer::run($stmt);
			#src/App.hx:159: characters 4-11
			++$stage;
			#src/App.hx:167: characters 4-49
			$this->lrs->postStatement(Boot::typedCast(Boot::getClass(Statement::class), $statement));
			#src/App.hx:169: characters 4-11
			++$stage;
		} catch(\Throwable $_g) {
			$e = HaxeException::caught($_g);
			#src/App.hx:174: characters 4-43
			$this1 = $this->resultMessageBack;
			$value = $e->get_message();
			$this1->data["msg"] = $value;
			#src/App.hx:175: characters 4-47
			$this->resultMessageBack->data["details"] = Boot::getInstanceClosure($e, 'details');
			#src/App.hx:176: characters 4-45
			$this1 = $this->resultMessageBack;
			$value = $e->get_native();
			$this1->data["native"] = $value;
			#src/App.hx:177: characters 4-41
			$this->resultMessageBack->data["stage"] = $stage;
			#src/App.hx:179: characters 4-48
			echo(\Std::string(JsonPrinter::print($this->resultMessageBack, null, null)));
		}
	}

	/**
	 * @return string
	 */
	public function testSerializer () {
		#src/App.hx:268: characters 3-2252
		return "cy14:xapi.Statementy11:attachmentsny9:timestampy32:2021-04-01T12%3A51%3A58.4760000Zy7:contextcy12:xapi.Contexty8:languagey2:eny10:extensionsny9:statementny8:platformy4:qooky8:revisionny17:contextActivitiesby6:parentaby2:idy31:https%3A%2F%2Fqook.test.salt.chhhy8:groupingahy5:otherahy8:categoryahhy10:instructorcy10:xapi.Agenty10:objectTypey5:Agenty4:mboxy31:mailto%3Abruno.baudry%40salt.chy4:namey7:bbaudrygy12:registrationngy6:resultcy11:xapi.Resulty8:durationy10:P0DT0H0M0Sy8:responseny10:completionty7:successty5:scorecy16:xapi.types.Scorey3:maxi100y3:minzy3:rawi100y6:scaledi1gR8by71:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.compliance.compliancey1:yy66:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.customer.welcomeR43y66:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.customer.empathyR43y69:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.customer.nextestepsR43y66:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.customer.closingR43y71:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.customer.paraphrasingR43y65:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.customer.onholdR43y66:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.business.processR43y71:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.business.expectationsR43y73:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.business.ticketCreationR43y75:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.business.contactAvoidanceR43y69:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.business.addedvalueR43y65:https%3A%2F%2Fqook.test.salt.ch%2Fcontent.inbound.business.wrapupR43hgy6:objectcy13:xapi.ActivityR22y8:ActivityR15y46:https%3A%2F%2Fqook.test.salt.ch%2Ftm%2Finboundy10:definitioncy26:xapi.activities.DefinitionR26bhy11:descriptionbhR8by60:https%3A%2F%2Fqook.test.salt.ch%2Ftm%2F%2FtransactionSummaryy8:jhkljshfy58:https%3A%2F%2Fqook.test.salt.ch%2Ftm%2F%2FmonitoringReasony5:basicy56:https%3A%2F%2Fqook.test.salt.ch%2Ftm%2F%2FmonitoringTypey6:remotey59:https%3A%2F%2Fqook.test.salt.ch%2Ftm%2F%2FmonitoringSummaryy8:dfgmflkghy4:typey53:http%3A%2F%2Factivitystrea.ms%2Fschema%2F1.0%2Freviewy8:moreInfonggy4:verbcy9:xapi.VerbR15y54:http%3A%2F%2Factivitystrea.ms%2Fschema%2F1.0%2Freceivey7:displaybR7y7:receivehgy5:actorcR21R22R23R24R25R26R27gg";
	}

	/**
	 * @return Statement
	 */
	public function testStatementAgent () {
		#src/App.hx:246: characters 3-48
		$I = new Agent("b@salt.ch", "TEST");
		#src/App.hx:247: characters 3-33
		$DID = Verb::$mentoored;
		#src/App.hx:248: characters 3-41
		$def = new Definition();
		#src/App.hx:249: characters 3-37
		$score = new Score(50, 100, 0);
		#src/App.hx:250: characters 3-75
		$RESULT = new Result($score, true, true, "monitoring summary");
		#src/App.hx:252: characters 3-29
		$def->get_name()->data["en"] = "test";
		#src/App.hx:253: characters 3-57
		$def->set_type("http://activitystrea.ms/schema/1.0/review");
		#src/App.hx:254: characters 3-22
		$def->set_extensions(new StringMap());
		#src/App.hx:255: characters 3-47
		$def->get_extensions()->data["https://test.ch/Int"] = 1;
		#src/App.hx:256: characters 3-57
		$def->get_extensions()->data["https://test.ch/String"] = "string";
		#src/App.hx:257: characters 3-52
		$def->get_extensions()->data["https://test.ch/Float"] = 9.99;
		#src/App.hx:258: characters 3-52
		$def->get_extensions()->data["https://test.ch/Bool"] = false;
		#src/App.hx:259: characters 3-89
		$THIS = new Activity("https://qook.salt.ch/transaction_monitoring/", $def);
		#src/App.hx:260: characters 3-39
		$CONTEXT = new Context();
		#src/App.hx:261: characters 3-59
		$CONTEXT->set_instructor(new Agent("tutor@salt.ch", "tutor"));
		#src/App.hx:262: characters 3-79
		$CONTEXT->statement = new StatementRef("d77e7afc-2738-46e1-a488-c6c592120183");
		#src/App.hx:263: characters 3-54
		return new Statement($I, $DID, $THIS, $RESULT, $CONTEXT);
	}

	/**
	 * @return Statement
	 */
	public function testStatementCoach () {
		#src/App.hx:216: characters 3-60
		$I = new Agent("bruno.baudry@salt.ch", "COACH");
		#src/App.hx:217: characters 3-33
		$DID = Verb::$mentoored;
		#src/App.hx:218: characters 3-53
		$THIS = new Agent("test@salt.ch", "monitoree");
		#src/App.hx:220: lines 220-222
		$_g = new StringMap();
		$_g->data["https://qast.salt.ch/statements"] = "85ee8d13-c52f-49e5-a7ae-24f43fc566a8";
		$ext = $_g;
		#src/App.hx:223: lines 223-228
		$_g = new StringMap();
		$_g->data["https://qook.test.salt.ch/tm//transactionSummary"] = "sdjfh";
		$_g->data["https://qook.test.salt.ch/tm//monitoringReason"] = "basic";
		$_g->data["https://qook.test.salt.ch/tm//monitoringType"] = "remote";
		$_g->data["https://qook.test.salt.ch/tm//monitoringSummary"] = "sdfsdf";
		$ext1 = $_g;
		#src/App.hx:229: characters 3-84
		$RESULT = new Result(new Score(50, 100, 0), true, true, null, 123456, $ext);
		#src/App.hx:230: characters 59-111
		$_g = new EnumValueMap();
		#src/App.hx:230: characters 71-109
		$_g1 = new StringMap();
		$_g1->data["id"] = "https://qook.test.salt.ch/tm";
		#src/App.hx:230: characters 59-111
		$_g->set(ContextActivity::parent(), \Array_hx::wrap([$_g1]));
		#src/App.hx:230: characters 3-112
		$ca = $_g;
		#src/App.hx:231: characters 3-133
		$CONTEXT = new Context(null, null, null, $ca, null, null, "en", new StatementRef("85ee8d13-c52f-49e5-a7ae-24f43fc566a8"), $ext1);
		#src/App.hx:240: characters 3-59
		$stmt = new Statement($I, $DID, $THIS, $RESULT, $CONTEXT);
		#src/App.hx:242: characters 3-14
		return $stmt;
	}
}

Boot::registerClass(App::class, 'App');
