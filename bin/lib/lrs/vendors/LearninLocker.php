<?php
/**
 * Generated by Haxe 4.1.5
 * Haxe source file: C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx
 */

namespace lrs\vendors;

use \php\Boot;
use \haxe\Exception;
use \haxe\ds\StringMap;

/**
 * ...
 * @author
 */
class LearninLocker extends Connector {
	/**
	 * @var StringMap
	 * @todo add name identifier and collect statics
	 * @param	lrsEndpoint
	 * @param	lrsUser
	 * @param	lrsUserPwd
	 * @param	auth
	 */
	static public $CLIENTS;

	/**
	 * @param string $client
	 * 
	 * @return Connector
	 */
	public static function FIND_LRS ($client) {
		#C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx:38: lines 38-40
		if (\array_key_exists($client, LearninLocker::$CLIENTS->data)) {
			#C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx:38: characters 38-57
			return (LearninLocker::$CLIENTS->data[$client] ?? null);
		} else if (\array_key_exists("default", LearninLocker::$CLIENTS->data)) {
			#C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx:39: characters 46-68
			return (LearninLocker::$CLIENTS->data["default"] ?? null);
		} else {
			#C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx:40: characters 8-13
			throw Exception::thrown("LearninLocker Error : client " . ($client??'null') . " not found and no default set");
		}
	}

	/**
	 * @param string $name
	 * @param string $lrsEndpoint
	 * @param string $lrsUser
	 * @param string $lrsUserPwd
	 * @param string $auth
	 * 
	 * @return void
	 */
	public function __construct ($name, $lrsEndpoint, $lrsUser = "", $lrsUserPwd = "", $auth = "") {
		#C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx:20: lines 20-35
		if ($lrsUser === null) {
			$lrsUser = "";
		}
		if ($lrsUserPwd === null) {
			$lrsUserPwd = "";
		}
		if ($auth === null) {
			$auth = "";
		}
		#C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx:26: characters 3-48
		parent::__construct($lrsEndpoint, $lrsUser, $lrsUserPwd, $auth);
		#C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx:27: lines 27-34
		if (\array_key_exists($name, LearninLocker::$CLIENTS->data)) {
			#C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx:29: characters 4-9
			throw Exception::thrown("Error client " . ($name??'null') . " already exisits");
		} else {
			#C:\_mesDocs\_git\_haxelibs\lrs\lrs/vendors/LearninLocker.hx:33: characters 4-27
			LearninLocker::$CLIENTS->data[$name] = $this;
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$CLIENTS = new StringMap();
	}
}

Boot::registerClass(LearninLocker::class, 'lrs.vendors.LearninLocker');
LearninLocker::__hx__init();
