<?php
/**
 * Haxe source file: C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx
 */

namespace thx;

use \php\Boot;

/**
 * Helper class for functions that take 3 arguments
 */
class Functions3 {
	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	public static function curry ($f) {
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:248: lines 248-252
		return function ($a, $b) use (&$f) {
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:249: lines 249-251
			return function ($c) use (&$f, &$b, &$a) {
				#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:250: characters 5-22
				return $f($a, $b, $c);
			};
		};
	}

	/**
	 * `memoize` wraps `callback` and calls it only once storing the result for future needs.
	 * Computed results are stored in an internal map. The keys to this map are generated by
	 * the resolver function that by default directly converts the arguments into a string.
	 * 
	 * @param \Closure $callback
	 * @param \Closure $resolver
	 * 
	 * @return \Closure
	 */
	public static function memoize ($callback, $resolver = null) {
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:228: lines 228-229
		if (null === $resolver) {
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:229: characters 4-12
			$resolver = function ($v1, $v2, $v3) {
				#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:229: characters 45-65
				return "" . \Std::string($v1) . ":" . \Std::string($v2) . ":" . \Std::string($v3);
			};
		}
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:230: characters 13-36
		$map_data = null;
		$this1 = [];
		$map_data = $this1;
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:231: lines 231-238
		return function ($v1, $v2, $v3) use (&$map_data, &$callback, &$resolver) {
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:232: characters 4-35
			$key = $resolver($v1, $v2, $v3);
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:233: lines 233-234
			if (\array_key_exists($key, $map_data)) {
				#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:234: characters 5-24
				return ($map_data[$key] ?? null);
			}
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:235: characters 4-38
			$result = $callback($v1, $v2, $v3);
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:236: characters 4-24
			$map_data[$key] = $result;
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:237: characters 4-17
			return $result;
		};
	}

	/**
	 * Wraps `callback` in a function that negates its results.
	 * 
	 * @param \Closure $callback
	 * 
	 * @return \Closure
	 */
	public static function negate ($callback) {
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:245: characters 3-68
		return function ($v1, $v2, $v3) use (&$callback) {
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:245: characters 40-68
			return !$callback($v1, $v2, $v3);
		};
	}
}

Boot::registerClass(Functions3::class, 'thx.Functions3');
