<?php
/**
 * Haxe source file: C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx
 */

namespace thx;

use \php\Boot;

/**
 * Helper class for functions that take 2 arguments
 */
class Functions2 {
	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	public static function curry ($f) {
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:188: lines 188-192
		return function ($a) use (&$f) {
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:189: lines 189-191
			return function ($b) use (&$f, &$a) {
				#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:190: characters 5-19
				return $f($a, $b);
			};
		};
	}

	/**
	 * `join` creates a function that calls the 2 functions passed as arguments in sequence
	 * and passes the same argument values to the both of them.
	 * 
	 * @param \Closure $fa
	 * @param \Closure $fb
	 * 
	 * @return \Closure
	 */
	public static function join ($fa, $fb) {
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:199: lines 199-202
		return function ($v1, $v2) use (&$fb, &$fa) {
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:200: characters 4-14
			$fa($v1, $v2);
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:201: characters 4-14
			$fb($v1, $v2);
		};
	}

	/**
	 * `memoize` wraps `callback` and calls it only once storing the result for future needs.
	 * Computed results are stored in an internal map. The keys to this map are generated by
	 * the resolver function that by default directly converts the arguments into a string.
	 * 
	 * @param \Closure $callback
	 * @param \Closure $resolver
	 * 
	 * @return \Closure
	 */
	public static function memoize ($callback, $resolver = null) {
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:174: lines 174-175
		if (null === $resolver) {
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:175: characters 4-12
			$resolver = function ($v1, $v2) {
				#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:175: characters 38-54
				return "" . \Std::string($v1) . ":" . \Std::string($v2);
			};
		}
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:176: characters 13-36
		$map_data = null;
		$this1 = [];
		$map_data = $this1;
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:177: lines 177-184
		return function ($v1, $v2) use (&$map_data, &$callback, &$resolver) {
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:178: characters 4-31
			$key = $resolver($v1, $v2);
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:179: lines 179-180
			if (\array_key_exists($key, $map_data)) {
				#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:180: characters 5-24
				return ($map_data[$key] ?? null);
			}
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:181: characters 4-34
			$result = $callback($v1, $v2);
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:182: characters 4-24
			$map_data[$key] = $result;
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:183: characters 4-17
			return $result;
		};
	}

	/**
	 * Wraps `callback` in a function that negates its results.
	 * 
	 * @param \Closure $callback
	 * 
	 * @return \Closure
	 */
	public static function negate ($callback) {
		#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:208: characters 3-57
		return function ($v1, $v2) use (&$callback) {
			#C:\HaxeToolkit\haxe\lib\thx,core/git/src/thx/Functions.hx:208: characters 33-57
			return !$callback($v1, $v2);
		};
	}
}

Boot::registerClass(Functions2::class, 'thx.Functions2');
