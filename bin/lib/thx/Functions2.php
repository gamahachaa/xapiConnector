<?php
/**
 * Haxe source file: C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx
 */

namespace thx;

use \php\Boot;

/**
 * Helper class for functions that take 2 arguments
 */
class Functions2 {
	/**
	 * @param \Closure $f
	 * 
	 * @return \Closure
	 */
	public static function curry ($f) {
		#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:196: characters 5-69
		return function ($a) use (&$f) {
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:196: characters 29-67
			return function ($b) use (&$f, &$a) {
				#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:196: characters 50-64
				return $f($a, $b);
			};
		};
	}

	/**
	 * `join` creates a function that calls the 2 functions passed as arguments in sequence
	 * and passes the same argument values to the both of them.
	 * 
	 * @param \Closure $fa
	 * @param \Closure $fb
	 * 
	 * @return \Closure
	 */
	public static function join ($fa, $fb) {
		#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:203: lines 203-206
		return function ($v1, $v2) use (&$fb, &$fa) {
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:204: characters 7-17
			$fa($v1, $v2);
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:205: characters 7-17
			$fb($v1, $v2);
		};
	}

	/**
	 * `memoize` wraps `callback` and calls it only once storing the result for future needs.
	 * Computed results are stored in an internal map. The keys to this map are generated by
	 * the resolver function that by default directly converts the arguments into a string.
	 * 
	 * @param \Closure $callback
	 * @param \Closure $resolver
	 * 
	 * @return \Closure
	 */
	public static function memoize ($callback, $resolver = null) {
		#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:182: lines 182-183
		if (null === $resolver) {
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:183: characters 7-15
			$resolver = function ($v1, $v2) {
				#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:183: characters 45-61
				return "" . \Std::string($v1) . ":" . \Std::string($v2);
			};
		}
		#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:184: characters 15-38
		$map_data = null;
		$this1 = [];
		$map_data = $this1;
		#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:185: lines 185-192
		return function ($v1, $v2) use (&$map_data, &$callback, &$resolver) {
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:186: characters 7-34
			$key = $resolver($v1, $v2);
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:187: lines 187-188
			if (\array_key_exists($key, $map_data)) {
				#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:188: characters 9-28
				return ($map_data[$key] ?? null);
			}
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:189: characters 7-37
			$result = $callback($v1, $v2);
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:190: characters 7-27
			$map_data[$key] = $result;
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:191: characters 7-20
			return $result;
		};
	}

	/**
	 * Wraps `callback` in a function that negates its results.
	 * 
	 * @param \Closure $callback
	 * 
	 * @return \Closure
	 */
	public static function negate ($callback) {
		#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:212: lines 212-213
		return function ($v1, $v2) use (&$callback) {
			#C:\HaxeToolkit\haxe\lib\thx,core/0,44,0/src/thx/Functions.hx:213: characters 7-31
			return !$callback($v1, $v2);
		};
	}
}

Boot::registerClass(Functions2::class, 'thx.Functions2');
